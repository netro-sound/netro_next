# This file was generated. Do not edit manually.

schema {
  query: Query
}

type AlbumType {
  albumType: String
  artists: [ArtistType!]!
  id: String!
  label: String
  name: String
  popularity: Int
  spotifyHref: String
  thumbnails: [ThumbnailType!]!
  totalTracks: Int
  tracks: [TrackType!]!
}

type ArtistType {
  albums: [AlbumType!]!
  id: String!
  name: String
  spotifyHref: String
  thumbnails: [ThumbnailType!]!
  tracks: [TrackType!]!
}

type DatasetType {
  description: String
  experiments: [ExperimentType!]!
  id: ID!
  name: String
  tracks: [TrackType!]!
}

type ExperimentQueryType {
  dateCreated: DateTime!
  experiment: ExperimentType!
  fingerprintTime: Float
  id: UUID!
  loadTime: Float
  model: ModelType!
  predictTime: Float
  preprocessTime: Float
  queryTrack: String
  streamUrl: String
  trackQuery: [TrackQueryType!]!
  tracks: [TrackType!]!
}

type ExperimentType {
  dataset: DatasetType!
  description: String
  encoderFile: String
  id: UUID!
  models: [ModelType!]!
  name: String
  preprocessJson: JSONString
  queries: [ExperimentQueryType!]!
  representationFile: String
  representationJson: JSONString
  scalerFile: String
}

type MetricType {
  accuracy: Float
  classesReport: JSONString
  experimentsTest: [ModelType!]!
  experimentsTrain: [ModelType!]!
  experimentsValidation: [ModelType!]!
  f1Score: Float
  id: ID!
  loss: Float
  precision: Float
  recall: Float
  support: Float
}

type ModelType {
  dependsOn: ModelType
  experiments: [ExperimentType!]!
  hyperParameters: JSONString
  id: ID!
  isAutoencoder: Boolean!
  isNeuralNetwork: Boolean!
  modelFile: String
  modelSet: [ModelType!]!
  queries: [ExperimentQueryType!]!
  scalerFile: String
  testMetrics: MetricType!
  trainMetrics: MetricType!
  type: MlModelTypeChoices
  validationMetrics: MetricType!
}

type PlaylistType {
  description: String
  id: String!
  name: String
  protected: Boolean
  public: Boolean
  spotifyHref: String
  thumbnails: [ThumbnailType!]!
  tracks: [TrackType!]!
}

type Query {
  albumById(id: String!): AlbumType
  albums(limit: Int = 20, page: Int = 1): [AlbumType!]
  artistById(id: String!): ArtistType
  artists(limit: Int = 20, page: Int = 1): [ArtistType!]
  datasetById(id: String!): DatasetType
  datasets(limit: Int = 20, page: Int = 1): [DatasetType!]
  experimentById(id: Int): ExperimentType
  experimentQueries(limit: Int = 20, page: Int = 1): [ExperimentQueryType!]
  experimentQueryById(id: UUID): ExperimentQueryType
  experiments: [ExperimentType!]
  metricById(id: Int): MetricType
  metrics: [MetricType!]
  modelById(id: Int): ModelType
  models: [ModelType!]
  playlistById(id: String!): PlaylistType
  playlists(limit: Int = 20, page: Int = 1): [PlaylistType!]
  trackById(id: String!): TrackType
  tracks(albumId: String, artistId: String, datasetId: ID, limit: Int = 20, page: Int = 1, playlistId: String, tracksId: [String]): [TrackType!]
}

type ThumbnailType {
  albums: [AlbumType!]!
  artists: [ArtistType!]!
  height: Int!
  id: ID!
  image: String!
  playlists: [PlaylistType!]!
  width: Int!
}

type TrackQueryType {
  accuracy: Float
  fingerprint: Boolean!
  id: ID!
  query: ExperimentQueryType!
  support: Int
  track: TrackType!
}

type TrackType {
  albums: [AlbumType!]
  artists: [ArtistType!]
  audio: String
  bitrate: Int
  channels: Int
  datasets: [DatasetType!]!
  durationMs: Int
  explicit: Boolean
  id: String!
  lyrics: String
  name: String
  playlists: [PlaylistType!]!
  popularity: Int
  queries: [ExperimentQueryType!]!
  sampleRate: Int
  spotifyHref: String
  status: ApiTrackStatusChoices
  streamUrl: String
  thumbnails: [ThumbnailType!]
  trackNumber: Int
  trackQuery: [TrackQueryType!]!
  youtubeHref: String
}

"An enumeration."
enum ApiTrackStatusChoices {
  "Downloaded"
  DOWNLOADED
  "Downloading"
  DOWNLOADING
  "Failed"
  FAILED
  "Failed Mismatch"
  FAILED_MISMATCH
  "Failed Not Found"
  FAILED_NOT_FOUND
  "Failed Spotify"
  FAILED_SPOTIFY
  "Pending"
  PENDING
}

"An enumeration."
enum MlModelTypeChoices {
  "Aebilstm"
  AE_BILSTM
  "Aecnn"
  AE_CNN
  "Aelstm"
  AE_LSTM
  "Aemlp"
  AE_MLP
  "Knn"
  KNN
  "Mlp"
  MLP
}

"""

The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""

Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

"""

Leverages the internal Python implementation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID
